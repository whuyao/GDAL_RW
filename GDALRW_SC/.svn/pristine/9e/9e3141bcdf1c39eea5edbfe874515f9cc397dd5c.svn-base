/************************************************************************/
/* This class is wrote for supercomputer to read image use parallel.
/* Not support Block read & write
/* But support multi-thread
/* Author: Y. Yao
/* E-mail: whuyao@foxmail.com
/* Version: v1.0
/************************************************************************/

#ifndef CLASS_GDAL_READ
#define CLASS_GDAL_READ

#include "gdal_priv.h"
#include "ogr_core.h"
#include "ogr_spatialref.h"

class CGDALRead
{
public:
	CGDALRead(void);
	~CGDALRead(void);

public:
	bool loadFrom(const char* _filename);
	unsigned char* read(int _row, int _col, int _band);
	unsigned char* readL(int _row, int _col, int _band);	//extension read-data

public:
	void close();
	bool isValid();

public:
	GDALDataset* poDataset();
	int rows();
	int cols();
	int bandnum();
	long datalength();
	double invalidValue();
	unsigned char* imgData();
	GDALDataType datatype();
	double* geotransform();
	char* projectionRef();
	int perPixelSize();

public:
	bool world2Pixel(double lat, double lon, double *x, double *y);
	bool pixel2World(double *lat, double *lon, double x, double y);
	bool pixel2Ground(double x,double y,double* pX,double* pY);
	bool ground2Pixel(double X,double Y,double* px,double* py);

protected:
	template<class TT> bool readData();

protected:
	GDALDataset* mpoDataset;	//=>
	int mnRows;					//
	int mnCols;					//
	int mnBands;				//
	unsigned char* mpData;		//=>
	GDALDataType mgDataType;	//
	long mnDatalength;			//=>
	double mpGeoTransform[6];	//
	char msProjectionRef[2048];	//
	char msFilename[2048];		//
	double mdInvalidValue;
	int mnPerPixSize;			//=>

public:
	OGRSpatialReferenceH srcSR;
	OGRSpatialReferenceH latLongSR;
	OGRCoordinateTransformationH poTransform;		//pixel->world
	OGRCoordinateTransformationH poTransformT;		//world->pixel
};

#endif



